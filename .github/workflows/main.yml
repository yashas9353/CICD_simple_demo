name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/python-example:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      # - name: Deploy to EC2
      #   run: |
      #     # SSH into the EC2 instance
      #     ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} ubuntu@34.227.195.129 << EOF
      #     # Pull the latest Docker image
      #     docker pull ${{ secrets.DOCKERHUB_USERNAME }}/python-example:latest
      #     # Stop the old container if it's running
      #     docker stop my-python-app || true
      #     docker rm my-python-app || true
      #     # Run the new Docker image with port mapping
      #     docker run -d --name my-python-app -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/python-example:latest
      #     EOF
